pragma circom  2.0.0;

template MIMC5Feistel() {

    signal input iL;
    signal input iR;
    signal input k;

    signal output oL;
    signal output oR;

    var numberOfRounds = 20;
    var c[20] = [
        0,
        97601377400413275829077561935054313120124005635779023012257940020489541426615,
        75667833473444280523595655255061618373235449285755756508799341298832077628840,
        20777692423407160186949599786310319740851741060318786859987551886716277871414,
        109395573775651416013561760102460285302876414584707887405989276116796975704508,
        9237790496903805357640999211613295082667644318860727630477933085957561920412,
        88217136199099091734794967082700985451963431228500342360875933255193098778073,
        87892180054219101637272062099047823355710444200887474476936869179441799079583,
        18380448236657819236709895954603093048877989195555311124772649738480238344543,
        37832094065846366777872301885699611353133220848854482142604174326445019345243,
        76875764846855676328054175616557883188586489641920782474600955044970553302441,
        55954275659290528140899495455457820476596786359727089137298516755879327405286,
        23383606856149508846848520365400750745871947959757546950308010949778201073734,
        104205626463997312707141225986130134402237846516685175680604801650666542409703,
        94593073973749975077757939690142732892396190210211121231769865690002672986338,
        6525567474744417904537943114272832224095070816549604424344791045774769181471,
        68957985124129998729836487347827105793728107664588978354657861198580103141727,
        71887921890546015894931472953189912203569110635151664136003784106870726018873,
        83999744901501710084241856497170333866084120663041597519210436999751051784455,
        83609206051462019113574355964455870505471165308843272719705749250652700388243
    ];

    signal lastOutputL[numberOfRounds + 1];
    signal lastOutputR[numberOfRounds + 1];

    var base[numberOfRounds];
    signal base2[numberOfRounds];
    signal base4[numberOfRounds];

    lastOutputL[0] <== iL;
    lastOutputR[0] <== iR;

    for(var i = 0; i < numberOfRounds; i++) {
        base[i] = lastOutputR[i] + k + c[i];
        base2[i] <== base[i] * base[i];
        base4[i] <== base2[i] * base2[i];

        lastOutputR[i + 1] <== lastOutputL[i] * base4[i] * base[i];
        lastOutputL[i + 1] <== lastOutputR[i];
    }

    oL <== lastOutputL[numberOfRounds];
    oR <== lastOutputR[numberOfRounds];

}

template MIMC5Sponge(numberOfInputs) {
    signal input k;
    signal input ins[numberOfInputs];
    signal output o;

    signal lastR[numberOfInputs + 1];
    signal lastC[numberOfInputs + 1];

    lastR[0] <== 0;
    lastC[0] <== 0;
    
    component layers[numberOfInputs];

    for(var i = 0; i < numberOfInputs; i++) {
        layers[i] = MIMC5Feistel();

        layers[i].iL <== lastR[i] + ins[i];
        layers[i].iR <== lastC[i];
        layers[i].k <== k;

        lastR[i + 1] <== layers[i].oL;
        lastC[i + 1] <== layers[i].oR;
    }

    o <== lastR[numberOfInputs];

}

component main = MIMC5Sponge(2);